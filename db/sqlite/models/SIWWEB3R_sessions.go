// Code generated by SQLBoiler 4.14.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// SIWWEB3RSession is an object representing the database table.
type SIWWEB3RSession struct {
	ID        int64     `boil:"id" json:"id" toml:"id" yaml:"id"`
	Token     string    `boil:"token" json:"token" toml:"token" yaml:"token"`
	MemberID  int64     `boil:"member_id" json:"member_id" toml:"member_id" yaml:"member_id"`
	CreatedAt time.Time `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *sIWWEB3RSessionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L sIWWEB3RSessionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var SIWWEB3RSessionColumns = struct {
	ID        string
	Token     string
	MemberID  string
	CreatedAt string
}{
	ID:        "id",
	Token:     "token",
	MemberID:  "member_id",
	CreatedAt: "created_at",
}

var SIWWEB3RSessionTableColumns = struct {
	ID        string
	Token     string
	MemberID  string
	CreatedAt string
}{
	ID:        "SIWWEB3R_sessions.id",
	Token:     "SIWWEB3R_sessions.token",
	MemberID:  "SIWWEB3R_sessions.member_id",
	CreatedAt: "SIWWEB3R_sessions.created_at",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpertime_Time struct{ field string }

func (w whereHelpertime_Time) EQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.EQ, x)
}
func (w whereHelpertime_Time) NEQ(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.NEQ, x)
}
func (w whereHelpertime_Time) LT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpertime_Time) LTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpertime_Time) GT(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpertime_Time) GTE(x time.Time) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var SIWWEB3RSessionWhere = struct {
	ID        whereHelperint64
	Token     whereHelperstring
	MemberID  whereHelperint64
	CreatedAt whereHelpertime_Time
}{
	ID:        whereHelperint64{field: "\"SIWWEB3R_sessions\".\"id\""},
	Token:     whereHelperstring{field: "\"SIWWEB3R_sessions\".\"token\""},
	MemberID:  whereHelperint64{field: "\"SIWWEB3R_sessions\".\"member_id\""},
	CreatedAt: whereHelpertime_Time{field: "\"SIWWEB3R_sessions\".\"created_at\""},
}

// SIWWEB3RSessionRels is where relationship names are stored.
var SIWWEB3RSessionRels = struct {
	Member string
}{
	Member: "Member",
}

// sIWWEB3RSessionR is where relationships are stored.
type sIWWEB3RSessionR struct {
	Member *Member `boil:"Member" json:"Member" toml:"Member" yaml:"Member"`
}

// NewStruct creates a new relationship struct
func (*sIWWEB3RSessionR) NewStruct() *sIWWEB3RSessionR {
	return &sIWWEB3RSessionR{}
}

func (r *sIWWEB3RSessionR) GetMember() *Member {
	if r == nil {
		return nil
	}
	return r.Member
}

// sIWWEB3RSessionL is where Load methods for each relationship are stored.
type sIWWEB3RSessionL struct{}

var (
	sIWWEB3RSessionAllColumns            = []string{"id", "token", "member_id", "created_at"}
	sIWWEB3RSessionColumnsWithoutDefault = []string{}
	sIWWEB3RSessionColumnsWithDefault    = []string{"id", "token", "member_id", "created_at"}
	sIWWEB3RSessionPrimaryKeyColumns     = []string{"id"}
	sIWWEB3RSessionGeneratedColumns      = []string{}
)

type (
	// SIWWEB3RSessionSlice is an alias for a slice of pointers to SIWWEB3RSession.
	// This should almost always be used instead of []SIWWEB3RSession.
	SIWWEB3RSessionSlice []*SIWWEB3RSession
	// SIWWEB3RSessionHook is the signature for custom SIWWEB3RSession hook methods
	SIWWEB3RSessionHook func(context.Context, boil.ContextExecutor, *SIWWEB3RSession) error

	sIWWEB3RSessionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	sIWWEB3RSessionType                 = reflect.TypeOf(&SIWWEB3RSession{})
	sIWWEB3RSessionMapping              = queries.MakeStructMapping(sIWWEB3RSessionType)
	sIWWEB3RSessionPrimaryKeyMapping, _ = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, sIWWEB3RSessionPrimaryKeyColumns)
	sIWWEB3RSessionInsertCacheMut       sync.RWMutex
	sIWWEB3RSessionInsertCache          = make(map[string]insertCache)
	sIWWEB3RSessionUpdateCacheMut       sync.RWMutex
	sIWWEB3RSessionUpdateCache          = make(map[string]updateCache)
	sIWWEB3RSessionUpsertCacheMut       sync.RWMutex
	sIWWEB3RSessionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var sIWWEB3RSessionAfterSelectHooks []SIWWEB3RSessionHook

var sIWWEB3RSessionBeforeInsertHooks []SIWWEB3RSessionHook
var sIWWEB3RSessionAfterInsertHooks []SIWWEB3RSessionHook

var sIWWEB3RSessionBeforeUpdateHooks []SIWWEB3RSessionHook
var sIWWEB3RSessionAfterUpdateHooks []SIWWEB3RSessionHook

var sIWWEB3RSessionBeforeDeleteHooks []SIWWEB3RSessionHook
var sIWWEB3RSessionAfterDeleteHooks []SIWWEB3RSessionHook

var sIWWEB3RSessionBeforeUpsertHooks []SIWWEB3RSessionHook
var sIWWEB3RSessionAfterUpsertHooks []SIWWEB3RSessionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *SIWWEB3RSession) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *SIWWEB3RSession) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *SIWWEB3RSession) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *SIWWEB3RSession) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *SIWWEB3RSession) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *SIWWEB3RSession) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *SIWWEB3RSession) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *SIWWEB3RSession) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *SIWWEB3RSession) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range sIWWEB3RSessionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddSIWWEB3RSessionHook registers your hook function for all future operations.
func AddSIWWEB3RSessionHook(hookPoint boil.HookPoint, sIWWEB3RSessionHook SIWWEB3RSessionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		sIWWEB3RSessionAfterSelectHooks = append(sIWWEB3RSessionAfterSelectHooks, sIWWEB3RSessionHook)
	case boil.BeforeInsertHook:
		sIWWEB3RSessionBeforeInsertHooks = append(sIWWEB3RSessionBeforeInsertHooks, sIWWEB3RSessionHook)
	case boil.AfterInsertHook:
		sIWWEB3RSessionAfterInsertHooks = append(sIWWEB3RSessionAfterInsertHooks, sIWWEB3RSessionHook)
	case boil.BeforeUpdateHook:
		sIWWEB3RSessionBeforeUpdateHooks = append(sIWWEB3RSessionBeforeUpdateHooks, sIWWEB3RSessionHook)
	case boil.AfterUpdateHook:
		sIWWEB3RSessionAfterUpdateHooks = append(sIWWEB3RSessionAfterUpdateHooks, sIWWEB3RSessionHook)
	case boil.BeforeDeleteHook:
		sIWWEB3RSessionBeforeDeleteHooks = append(sIWWEB3RSessionBeforeDeleteHooks, sIWWEB3RSessionHook)
	case boil.AfterDeleteHook:
		sIWWEB3RSessionAfterDeleteHooks = append(sIWWEB3RSessionAfterDeleteHooks, sIWWEB3RSessionHook)
	case boil.BeforeUpsertHook:
		sIWWEB3RSessionBeforeUpsertHooks = append(sIWWEB3RSessionBeforeUpsertHooks, sIWWEB3RSessionHook)
	case boil.AfterUpsertHook:
		sIWWEB3RSessionAfterUpsertHooks = append(sIWWEB3RSessionAfterUpsertHooks, sIWWEB3RSessionHook)
	}
}

// One returns a single sIWWEB3RSession record from the query.
func (q sIWWEB3RSessionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*SIWWEB3RSession, error) {
	o := &SIWWEB3RSession{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for SIWWEB3R_sessions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all SIWWEB3RSession records from the query.
func (q sIWWEB3RSessionQuery) All(ctx context.Context, exec boil.ContextExecutor) (SIWWEB3RSessionSlice, error) {
	var o []*SIWWEB3RSession

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to SIWWEB3RSession slice")
	}

	if len(sIWWEB3RSessionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all SIWWEB3RSession records in the query.
func (q sIWWEB3RSessionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count SIWWEB3R_sessions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q sIWWEB3RSessionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if SIWWEB3R_sessions exists")
	}

	return count > 0, nil
}

// Member pointed to by the foreign key.
func (o *SIWWEB3RSession) Member(mods ...qm.QueryMod) memberQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MemberID),
	}

	queryMods = append(queryMods, mods...)

	return Members(queryMods...)
}

// LoadMember allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (sIWWEB3RSessionL) LoadMember(ctx context.Context, e boil.ContextExecutor, singular bool, maybeSIWWEB3RSession interface{}, mods queries.Applicator) error {
	var slice []*SIWWEB3RSession
	var object *SIWWEB3RSession

	if singular {
		var ok bool
		object, ok = maybeSIWWEB3RSession.(*SIWWEB3RSession)
		if !ok {
			object = new(SIWWEB3RSession)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeSIWWEB3RSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeSIWWEB3RSession))
			}
		}
	} else {
		s, ok := maybeSIWWEB3RSession.(*[]*SIWWEB3RSession)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeSIWWEB3RSession)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeSIWWEB3RSession))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &sIWWEB3RSessionR{}
		}
		args = append(args, object.MemberID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &sIWWEB3RSessionR{}
			}

			for _, a := range args {
				if a == obj.MemberID {
					continue Outer
				}
			}

			args = append(args, obj.MemberID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`members`),
		qm.WhereIn(`members.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Member")
	}

	var resultSlice []*Member
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Member")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for members")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for members")
	}

	if len(memberAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Member = foreign
		if foreign.R == nil {
			foreign.R = &memberR{}
		}
		foreign.R.SIWWEB3RSessions = append(foreign.R.SIWWEB3RSessions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MemberID == foreign.ID {
				local.R.Member = foreign
				if foreign.R == nil {
					foreign.R = &memberR{}
				}
				foreign.R.SIWWEB3RSessions = append(foreign.R.SIWWEB3RSessions, local)
				break
			}
		}
	}

	return nil
}

// SetMember of the sIWWEB3RSession to the related item.
// Sets o.R.Member to related.
// Adds o to related.R.SIWWEB3RSessions.
func (o *SIWWEB3RSession) SetMember(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Member) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"SIWWEB3R_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, []string{"member_id"}),
		strmangle.WhereClause("\"", "\"", 0, sIWWEB3RSessionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MemberID = related.ID
	if o.R == nil {
		o.R = &sIWWEB3RSessionR{
			Member: related,
		}
	} else {
		o.R.Member = related
	}

	if related.R == nil {
		related.R = &memberR{
			SIWWEB3RSessions: SIWWEB3RSessionSlice{o},
		}
	} else {
		related.R.SIWWEB3RSessions = append(related.R.SIWWEB3RSessions, o)
	}

	return nil
}

// SIWWEB3RSessions retrieves all the records using an executor.
func SIWWEB3RSessions(mods ...qm.QueryMod) sIWWEB3RSessionQuery {
	mods = append(mods, qm.From("\"SIWWEB3R_sessions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"SIWWEB3R_sessions\".*"})
	}

	return sIWWEB3RSessionQuery{q}
}

// FindSIWWEB3RSession retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindSIWWEB3RSession(ctx context.Context, exec boil.ContextExecutor, iD int64, selectCols ...string) (*SIWWEB3RSession, error) {
	sIWWEB3RSessionObj := &SIWWEB3RSession{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"SIWWEB3R_sessions\" where \"id\"=?", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, sIWWEB3RSessionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from SIWWEB3R_sessions")
	}

	if err = sIWWEB3RSessionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return sIWWEB3RSessionObj, err
	}

	return sIWWEB3RSessionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *SIWWEB3RSession) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SIWWEB3R_sessions provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sIWWEB3RSessionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	sIWWEB3RSessionInsertCacheMut.RLock()
	cache, cached := sIWWEB3RSessionInsertCache[key]
	sIWWEB3RSessionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			sIWWEB3RSessionAllColumns,
			sIWWEB3RSessionColumnsWithDefault,
			sIWWEB3RSessionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"SIWWEB3R_sessions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"SIWWEB3R_sessions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into SIWWEB3R_sessions")
	}

	if !cached {
		sIWWEB3RSessionInsertCacheMut.Lock()
		sIWWEB3RSessionInsertCache[key] = cache
		sIWWEB3RSessionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the SIWWEB3RSession.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *SIWWEB3RSession) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	sIWWEB3RSessionUpdateCacheMut.RLock()
	cache, cached := sIWWEB3RSessionUpdateCache[key]
	sIWWEB3RSessionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			sIWWEB3RSessionAllColumns,
			sIWWEB3RSessionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update SIWWEB3R_sessions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"SIWWEB3R_sessions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, sIWWEB3RSessionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, append(wl, sIWWEB3RSessionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update SIWWEB3R_sessions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for SIWWEB3R_sessions")
	}

	if !cached {
		sIWWEB3RSessionUpdateCacheMut.Lock()
		sIWWEB3RSessionUpdateCache[key] = cache
		sIWWEB3RSessionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q sIWWEB3RSessionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for SIWWEB3R_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for SIWWEB3R_sessions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o SIWWEB3RSessionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sIWWEB3RSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"SIWWEB3R_sessions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sIWWEB3RSessionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in sIWWEB3RSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all sIWWEB3RSession")
	}
	return rowsAff, nil
}

// Delete deletes a single SIWWEB3RSession record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *SIWWEB3RSession) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no SIWWEB3RSession provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), sIWWEB3RSessionPrimaryKeyMapping)
	sql := "DELETE FROM \"SIWWEB3R_sessions\" WHERE \"id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from SIWWEB3R_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for SIWWEB3R_sessions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q sIWWEB3RSessionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no sIWWEB3RSessionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from SIWWEB3R_sessions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SIWWEB3R_sessions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o SIWWEB3RSessionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(sIWWEB3RSessionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sIWWEB3RSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"SIWWEB3R_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sIWWEB3RSessionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from sIWWEB3RSession slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for SIWWEB3R_sessions")
	}

	if len(sIWWEB3RSessionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *SIWWEB3RSession) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindSIWWEB3RSession(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *SIWWEB3RSessionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := SIWWEB3RSessionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), sIWWEB3RSessionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"SIWWEB3R_sessions\".* FROM \"SIWWEB3R_sessions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, sIWWEB3RSessionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in SIWWEB3RSessionSlice")
	}

	*o = slice

	return nil
}

// SIWWEB3RSessionExists checks if the SIWWEB3RSession row exists.
func SIWWEB3RSessionExists(ctx context.Context, exec boil.ContextExecutor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"SIWWEB3R_sessions\" where \"id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if SIWWEB3R_sessions exists")
	}

	return exists, nil
}

// Exists checks if the SIWWEB3RSession row exists.
func (o *SIWWEB3RSession) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return SIWWEB3RSessionExists(ctx, exec, o.ID)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *SIWWEB3RSession) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no SIWWEB3R_sessions provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(sIWWEB3RSessionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	sIWWEB3RSessionUpsertCacheMut.RLock()
	cache, cached := sIWWEB3RSessionUpsertCache[key]
	sIWWEB3RSessionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			sIWWEB3RSessionAllColumns,
			sIWWEB3RSessionColumnsWithDefault,
			sIWWEB3RSessionColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			sIWWEB3RSessionAllColumns,
			sIWWEB3RSessionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert SIWWEB3R_sessions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(sIWWEB3RSessionPrimaryKeyColumns))
			copy(conflict, sIWWEB3RSessionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"SIWWEB3R_sessions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(sIWWEB3RSessionType, sIWWEB3RSessionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert SIWWEB3R_sessions")
	}

	if !cached {
		sIWWEB3RSessionUpsertCacheMut.Lock()
		sIWWEB3RSessionUpsertCache[key] = cache
		sIWWEB3RSessionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}
